from pprint import *

def score_table(seq1,seq2,match=1,mismatch=0,gap=-1):
    score_table=[[0 for i in range(len(seq1))] for j in range(len(seq2))]
    for i in  range(len(seq2)):
        score_table[i][0]=i*gap
    for j in range(len(seq1)):
        score_table[0][j]=0

    for i in range(1,len(seq2)):
        if i!=len(seq2)-1:
            for j in range(1,len(seq1)):
                if seq2[i]!=seq1[j]:
                    score_table[i][j]=max(score_table[i-1][j]+gap,score_table[i][j-1]+gap,score_table[i-1][j-1]+mismatch)
                else:
                    score_table[i][j]=max(score_table[i-1][j]+gap,score_table[i][j-1]+gap,score_table[i-1][j-1]+match)
        else:
            for j in range(1,len(seq1)):
                if seq2[i]!=seq1[j]:
                    score_table[i][j]=max(score_table[i-1][j]+gap,score_table[i][j-1],score_table[i-1][j-1]+mismatch)
                else:
                    score_table[i][j]=max(score_table[i-1][j]+gap,score_table[i][j-1],score_table[i-1][j-1]+match)

    pprint(score_table)
    
    
#最后一行单独处理，横着不扣，找最大的
#Seq1 = '@ATGG'
#Seq2 = '@GATCTG'
#score_table(Seq2,Seq1)
#参数match,mismatch,gap可以调整，以整数或者浮点数的形式传递
